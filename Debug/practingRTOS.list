
practingRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000092c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ac4  08000ac4  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ac4  08000ac4  00002008  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000ac4  08000ac4  00002008  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000ac4  08000ac4  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ac4  08000ac4  00001ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ac8  08000ac8  00001ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  08000acc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  20000008  08000ad4  00002008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  08000ad4  0000268c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000921  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004fc  00000000  00000000  00002959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000158  00000000  00000000  00002e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000ee  00000000  00000000  00002fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001d93  00000000  00000000  0000309e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000015da  00000000  00000000  00004e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000078b9  00000000  00000000  0000640b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000dcc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003d0  00000000  00000000  0000dd08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0000e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000008 	.word	0x20000008
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000aac 	.word	0x08000aac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000000c 	.word	0x2000000c
 80001d4:	08000aac 	.word	0x08000aac

080001d8 <configureClock>:
#include "config.h"

// Configuration functions
void configureClock()
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	// Clock Configuration - SYSCLK sourced from HSE - 8 Mhz
	RCC_CR |= (1 << 16); // HSEON -> 1
 80001dc:	4b15      	ldr	r3, [pc, #84]	@ (8000234 <configureClock+0x5c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a14      	ldr	r2, [pc, #80]	@ (8000234 <configureClock+0x5c>)
 80001e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80001e6:	6013      	str	r3, [r2, #0]
	while (!(RCC_CR & (1 << 17)))
 80001e8:	bf00      	nop
 80001ea:	4b12      	ldr	r3, [pc, #72]	@ (8000234 <configureClock+0x5c>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d0f9      	beq.n	80001ea <configureClock+0x12>
		;
	RCC_CFGR &= ~(1U << 0);
 80001f6:	4b10      	ldr	r3, [pc, #64]	@ (8000238 <configureClock+0x60>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000238 <configureClock+0x60>)
 80001fc:	f023 0301 	bic.w	r3, r3, #1
 8000200:	6013      	str	r3, [r2, #0]
	RCC_CFGR &= ~(1U << 1);
 8000202:	4b0d      	ldr	r3, [pc, #52]	@ (8000238 <configureClock+0x60>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a0c      	ldr	r2, [pc, #48]	@ (8000238 <configureClock+0x60>)
 8000208:	f023 0302 	bic.w	r3, r3, #2
 800020c:	6013      	str	r3, [r2, #0]
	RCC_CFGR |= (1 << 0);
 800020e:	4b0a      	ldr	r3, [pc, #40]	@ (8000238 <configureClock+0x60>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a09      	ldr	r2, [pc, #36]	@ (8000238 <configureClock+0x60>)
 8000214:	f043 0301 	orr.w	r3, r3, #1
 8000218:	6013      	str	r3, [r2, #0]
	// 0x3 -> 0b11
	// 0x1 -> 0b01
	while ((RCC_CFGR & (0x3 << 2)) != (0x1 << 2))
 800021a:	bf00      	nop
 800021c:	4b06      	ldr	r3, [pc, #24]	@ (8000238 <configureClock+0x60>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f003 030c 	and.w	r3, r3, #12
 8000224:	2b04      	cmp	r3, #4
 8000226:	d1f9      	bne.n	800021c <configureClock+0x44>
		;
}
 8000228:	bf00      	nop
 800022a:	bf00      	nop
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	40023800 	.word	0x40023800
 8000238:	40023808 	.word	0x40023808

0800023c <configureBlueLED>:

void configureBlueLED()
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	// Enable the RCC Peripheral Clock for GPIOD
	RCC_AHB1ENR |= (1 << 3);
 8000240:	4b0e      	ldr	r3, [pc, #56]	@ (800027c <configureBlueLED+0x40>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a0d      	ldr	r2, [pc, #52]	@ (800027c <configureBlueLED+0x40>)
 8000246:	f043 0308 	orr.w	r3, r3, #8
 800024a:	6013      	str	r3, [r2, #0]
	// Set the PD15 GPIO Pin (Blue LED) to Output
	GPIOD_MODER &= ~(1 << 31);
 800024c:	4b0c      	ldr	r3, [pc, #48]	@ (8000280 <configureBlueLED+0x44>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a0b      	ldr	r2, [pc, #44]	@ (8000280 <configureBlueLED+0x44>)
 8000252:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000256:	6013      	str	r3, [r2, #0]
	GPIOD_MODER &= ~(1U << 30);
 8000258:	4b09      	ldr	r3, [pc, #36]	@ (8000280 <configureBlueLED+0x44>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a08      	ldr	r2, [pc, #32]	@ (8000280 <configureBlueLED+0x44>)
 800025e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000262:	6013      	str	r3, [r2, #0]
	GPIOD_MODER |= (1 << 30);
 8000264:	4b06      	ldr	r3, [pc, #24]	@ (8000280 <configureBlueLED+0x44>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a05      	ldr	r2, [pc, #20]	@ (8000280 <configureBlueLED+0x44>)
 800026a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800026e:	6013      	str	r3, [r2, #0]
}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40023830 	.word	0x40023830
 8000280:	40020c00 	.word	0x40020c00

08000284 <configureGreenLED>:

void configureGreenLED()
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
	// Clock already enabled, since blue LED is also on GPIOD
	// Green LED: PD12
	GPIOD_MODER &= ~(1U << 24);
 8000288:	4b0b      	ldr	r3, [pc, #44]	@ (80002b8 <configureGreenLED+0x34>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a0a      	ldr	r2, [pc, #40]	@ (80002b8 <configureGreenLED+0x34>)
 800028e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000292:	6013      	str	r3, [r2, #0]
	GPIOD_MODER &= ~(1U << 25);
 8000294:	4b08      	ldr	r3, [pc, #32]	@ (80002b8 <configureGreenLED+0x34>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a07      	ldr	r2, [pc, #28]	@ (80002b8 <configureGreenLED+0x34>)
 800029a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800029e:	6013      	str	r3, [r2, #0]
	GPIOD_MODER |= (1 << 24);
 80002a0:	4b05      	ldr	r3, [pc, #20]	@ (80002b8 <configureGreenLED+0x34>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a04      	ldr	r2, [pc, #16]	@ (80002b8 <configureGreenLED+0x34>)
 80002a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002aa:	6013      	str	r3, [r2, #0]
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40020c00 	.word	0x40020c00

080002bc <configureOrangeLED>:

void configureOrangeLED()
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	// Orange LED: PD13
	GPIOD_MODER &= ~(1U << 26);
 80002c0:	4b0b      	ldr	r3, [pc, #44]	@ (80002f0 <configureOrangeLED+0x34>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a0a      	ldr	r2, [pc, #40]	@ (80002f0 <configureOrangeLED+0x34>)
 80002c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOD_MODER &= ~(1U << 27);
 80002cc:	4b08      	ldr	r3, [pc, #32]	@ (80002f0 <configureOrangeLED+0x34>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a07      	ldr	r2, [pc, #28]	@ (80002f0 <configureOrangeLED+0x34>)
 80002d2:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80002d6:	6013      	str	r3, [r2, #0]
	GPIOD_MODER |= (1 << 26);
 80002d8:	4b05      	ldr	r3, [pc, #20]	@ (80002f0 <configureOrangeLED+0x34>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a04      	ldr	r2, [pc, #16]	@ (80002f0 <configureOrangeLED+0x34>)
 80002de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80002e2:	6013      	str	r3, [r2, #0]
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40020c00 	.word	0x40020c00

080002f4 <configureSystickInterrupts>:

void configureSystickInterrupts()
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	SYSTICK_CSR &= ~(1U << 0);			// Disable timer
 80002f8:	4b11      	ldr	r3, [pc, #68]	@ (8000340 <configureSystickInterrupts+0x4c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a10      	ldr	r2, [pc, #64]	@ (8000340 <configureSystickInterrupts+0x4c>)
 80002fe:	f023 0301 	bic.w	r3, r3, #1
 8000302:	6013      	str	r3, [r2, #0]
	SYSTICK_CSR |= (1 << 2);			// Use SYSCLK
 8000304:	4b0e      	ldr	r3, [pc, #56]	@ (8000340 <configureSystickInterrupts+0x4c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a0d      	ldr	r2, [pc, #52]	@ (8000340 <configureSystickInterrupts+0x4c>)
 800030a:	f043 0304 	orr.w	r3, r3, #4
 800030e:	6013      	str	r3, [r2, #0]
	SYSTICK_CSR |= (1 << 1);			// Enable interrupt requests
 8000310:	4b0b      	ldr	r3, [pc, #44]	@ (8000340 <configureSystickInterrupts+0x4c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a0a      	ldr	r2, [pc, #40]	@ (8000340 <configureSystickInterrupts+0x4c>)
 8000316:	f043 0302 	orr.w	r3, r3, #2
 800031a:	6013      	str	r3, [r2, #0]
	SYSTICK_RELOAD = 7999;				// 1 ms per interval
 800031c:	4b09      	ldr	r3, [pc, #36]	@ (8000344 <configureSystickInterrupts+0x50>)
 800031e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000322:	601a      	str	r2, [r3, #0]
	SYSTICK_CURRENT = 0x00000000; // Reset current count
 8000324:	4b08      	ldr	r3, [pc, #32]	@ (8000348 <configureSystickInterrupts+0x54>)
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
	SYSTICK_CSR |= (1 << 0);			// Enable Timer
 800032a:	4b05      	ldr	r3, [pc, #20]	@ (8000340 <configureSystickInterrupts+0x4c>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a04      	ldr	r2, [pc, #16]	@ (8000340 <configureSystickInterrupts+0x4c>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6013      	str	r3, [r2, #0]
}
 8000336:	bf00      	nop
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	e000e010 	.word	0xe000e010
 8000344:	e000e014 	.word	0xe000e014
 8000348:	e000e018 	.word	0xe000e018

0800034c <configureInterruptPriorities>:

void configureInterruptPriorities()
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
	// PendSV to the lowest priority (240 because only top 4 bits are used)
	SHPR3 &= ~(0xFFU << PENDSV_PRIORITY_START_BIT);
 8000350:	4b0e      	ldr	r3, [pc, #56]	@ (800038c <configureInterruptPriorities+0x40>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a0d      	ldr	r2, [pc, #52]	@ (800038c <configureInterruptPriorities+0x40>)
 8000356:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800035a:	6013      	str	r3, [r2, #0]
	SHPR3 |= (0xF0U << PENDSV_PRIORITY_START_BIT);
 800035c:	4b0b      	ldr	r3, [pc, #44]	@ (800038c <configureInterruptPriorities+0x40>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a0a      	ldr	r2, [pc, #40]	@ (800038c <configureInterruptPriorities+0x40>)
 8000362:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000366:	6013      	str	r3, [r2, #0]

	// SysTick to right above PendSV (224 because only top 4 bits are used)
	SHPR3 &= ~(0xFFU << SYSTICK_PRIORITY_START_BIT);
 8000368:	4b08      	ldr	r3, [pc, #32]	@ (800038c <configureInterruptPriorities+0x40>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a07      	ldr	r2, [pc, #28]	@ (800038c <configureInterruptPriorities+0x40>)
 800036e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000372:	6013      	str	r3, [r2, #0]
	SHPR3 |= (0xE0U << SYSTICK_PRIORITY_START_BIT);
 8000374:	4b05      	ldr	r3, [pc, #20]	@ (800038c <configureInterruptPriorities+0x40>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a04      	ldr	r2, [pc, #16]	@ (800038c <configureInterruptPriorities+0x40>)
 800037a:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 800037e:	6013      	str	r3, [r2, #0]
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	e000ed20 	.word	0xe000ed20

08000390 <configureAll>:

void configureAll()
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	configureClock();
 8000394:	f7ff ff20 	bl	80001d8 <configureClock>
	configureSystickInterrupts();
 8000398:	f7ff ffac 	bl	80002f4 <configureSystickInterrupts>
	configureBlueLED();
 800039c:	f7ff ff4e 	bl	800023c <configureBlueLED>
	configureGreenLED();
 80003a0:	f7ff ff70 	bl	8000284 <configureGreenLED>
	configureOrangeLED();
 80003a4:	f7ff ff8a 	bl	80002bc <configureOrangeLED>
	configureInterruptPriorities();
 80003a8:	f7ff ffd0 	bl	800034c <configureInterruptPriorities>
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <task1_blueLED>:
TCB task2TCB;
TaskNode task1Node;
TaskNode task2Node;

void task1_blueLED()
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	for (;;)
	{
		GPIOD_ODR ^= (1 << 15);
 80003b4:	4b05      	ldr	r3, [pc, #20]	@ (80003cc <task1_blueLED+0x1c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a04      	ldr	r2, [pc, #16]	@ (80003cc <task1_blueLED+0x1c>)
 80003ba:	f483 4300 	eor.w	r3, r3, #32768	@ 0x8000
 80003be:	6013      	str	r3, [r2, #0]
		taskDelay(1000);
 80003c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003c4:	f000 f9ac 	bl	8000720 <taskDelay>
		GPIOD_ODR ^= (1 << 15);
 80003c8:	bf00      	nop
 80003ca:	e7f3      	b.n	80003b4 <task1_blueLED+0x4>
 80003cc:	40020c14 	.word	0x40020c14

080003d0 <task2_greenLED>:
	}
}

void task2_greenLED()
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	for (;;)
	{
		GPIOD_ODR ^= (1 << 12);
 80003d4:	4b05      	ldr	r3, [pc, #20]	@ (80003ec <task2_greenLED+0x1c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a04      	ldr	r2, [pc, #16]	@ (80003ec <task2_greenLED+0x1c>)
 80003da:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80003de:	6013      	str	r3, [r2, #0]
		taskDelay(500);
 80003e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003e4:	f000 f99c 	bl	8000720 <taskDelay>
		GPIOD_ODR ^= (1 << 12);
 80003e8:	bf00      	nop
 80003ea:	e7f3      	b.n	80003d4 <task2_greenLED+0x4>
 80003ec:	40020c14 	.word	0x40020c14

080003f0 <main>:
	}
}

int main(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af02      	add	r7, sp, #8
	configureAll();
 80003f6:	f7ff ffcb 	bl	8000390 <configureAll>

	createTask(task1Stack, &task1_blueLED, 1, &task1TCB, &task1Node);
 80003fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000424 <main+0x34>)
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000428 <main+0x38>)
 8000400:	2201      	movs	r2, #1
 8000402:	490a      	ldr	r1, [pc, #40]	@ (800042c <main+0x3c>)
 8000404:	480a      	ldr	r0, [pc, #40]	@ (8000430 <main+0x40>)
 8000406:	f000 f899 	bl	800053c <createTask>
	createTask(task2Stack, &task2_greenLED, 1, &task2TCB, &task2Node);
 800040a:	4b0a      	ldr	r3, [pc, #40]	@ (8000434 <main+0x44>)
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	4b0a      	ldr	r3, [pc, #40]	@ (8000438 <main+0x48>)
 8000410:	2201      	movs	r2, #1
 8000412:	490a      	ldr	r1, [pc, #40]	@ (800043c <main+0x4c>)
 8000414:	480a      	ldr	r0, [pc, #40]	@ (8000440 <main+0x50>)
 8000416:	f000 f891 	bl	800053c <createTask>

	startScheduler();
 800041a:	f000 f95d 	bl	80006d8 <startScheduler>
	while (1)
 800041e:	bf00      	nop
 8000420:	e7fd      	b.n	800041e <main+0x2e>
 8000422:	bf00      	nop
 8000424:	20000444 	.word	0x20000444
 8000428:	20000424 	.word	0x20000424
 800042c:	080003b1 	.word	0x080003b1
 8000430:	20000024 	.word	0x20000024
 8000434:	2000044c 	.word	0x2000044c
 8000438:	20000434 	.word	0x20000434
 800043c:	080003d1 	.word	0x080003d1
 8000440:	20000224 	.word	0x20000224

08000444 <systemENTER_CRITICAL>:
#include "system_funcs.h"

void systemENTER_CRITICAL() {
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
	// Mask priorities 0xE0 to 0xFF, which includes SysTick_Handler and PendSV_Handler
	__asm volatile(
 8000448:	f04f 00e0 	mov.w	r0, #224	@ 0xe0
 800044c:	f380 8811 	msr	BASEPRI, r0
 8000450:	f3bf 8f6f 	isb	sy
			"MOV r0, #0xE0\n"
			"MSR BASEPRI, r0\n"
			"ISB\n");
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <systemEXIT_CRITICAL>:

void systemEXIT_CRITICAL() {
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0
	__asm volatile(
 8000462:	f04f 0000 	mov.w	r0, #0
 8000466:	f380 8811 	msr	BASEPRI, r0
 800046a:	f3bf 8f6f 	isb	sy
			"MOV r0, #0x00\n"
			"MSR BASEPRI, r0\n"
			"ISB\n");
}
 800046e:	bf00      	nop
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr

08000478 <initTaskStackFrame>:
static TaskNode *prvIdleTask;
static TaskNode *createIdleTask();
static void idleTask();

uint32_t *initTaskStackFrame(uint32_t taskStack[], void (*taskFunc)(void))
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
	taskStack[STACK_SIZE - 1] = 0x01000000;									// xPSR
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8000488:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800048c:	601a      	str	r2, [r3, #0]
	taskStack[STACK_SIZE - 2] = ((uint32_t)taskFunc) | 0x1; // PC
 800048e:	683a      	ldr	r2, [r7, #0]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8000496:	f042 0201 	orr.w	r2, r2, #1
 800049a:	601a      	str	r2, [r3, #0]
	taskStack[STACK_SIZE - 3] = 0xFFFFFFFD;									// LR
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80004a2:	f06f 0202 	mvn.w	r2, #2
 80004a6:	601a      	str	r2, [r3, #0]
	taskStack[STACK_SIZE - 4] = 0x00000000;									// R12
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
	taskStack[STACK_SIZE - 5] = 0x00000000;									// R3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
	taskStack[STACK_SIZE - 6] = 0x00000000;									// R2
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
	taskStack[STACK_SIZE - 7] = 0x00000000;									// R1
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
	taskStack[STACK_SIZE - 8] = 0x00000000;									// R0
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
	taskStack[STACK_SIZE - 9] = 0x00000000;									// R11
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
	taskStack[STACK_SIZE - 10] = 0x00000000;								// R10
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
	taskStack[STACK_SIZE - 11] = 0x00000000;								// R9
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
	taskStack[STACK_SIZE - 12] = 0x00000000;								// R8
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
	taskStack[STACK_SIZE - 13] = 0x00000000;								// R7
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
	taskStack[STACK_SIZE - 14] = 0x00000000;								// R6
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
	taskStack[STACK_SIZE - 15] = 0x00000000;								// R5
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
	taskStack[STACK_SIZE - 16] = 0x00000000;								// R4
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]

	return &taskStack[STACK_SIZE - 16];
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
}
 8000530:	4618      	mov	r0, r3
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <createTask>:

STATUS createTask(uint32_t taskStack[], void (*taskFunc)(void), unsigned int priority, TCB *userAllocatedTCB, TaskNode *userAllocatedTaskNode)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
 8000548:	603b      	str	r3, [r7, #0]
	if (!taskFunc || !userAllocatedTCB || !userAllocatedTaskNode) return STATUS_FAILURE;
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d005      	beq.n	800055c <createTask+0x20>
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d002      	beq.n	800055c <createTask+0x20>
 8000556:	6a3b      	ldr	r3, [r7, #32]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d101      	bne.n	8000560 <createTask+0x24>
 800055c:	2301      	movs	r3, #1
 800055e:	e027      	b.n	80005b0 <createTask+0x74>
	if (priority >= MAX_PRIORITIES) return STATUS_FAILURE;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d901      	bls.n	800056a <createTask+0x2e>
 8000566:	2301      	movs	r3, #1
 8000568:	e022      	b.n	80005b0 <createTask+0x74>

	userAllocatedTCB->sp = initTaskStackFrame(taskStack, taskFunc);
 800056a:	68b9      	ldr	r1, [r7, #8]
 800056c:	68f8      	ldr	r0, [r7, #12]
 800056e:	f7ff ff83 	bl	8000478 <initTaskStackFrame>
 8000572:	4602      	mov	r2, r0
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	601a      	str	r2, [r3, #0]
	userAllocatedTCB->priority = priority;
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	605a      	str	r2, [r3, #4]
	userAllocatedTCB->id = prvCurTaskIDNum;
 800057e:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <createTask+0x7c>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	609a      	str	r2, [r3, #8]
	prvCurTaskIDNum++;
 8000586:	4b0c      	ldr	r3, [pc, #48]	@ (80005b8 <createTask+0x7c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	4a0a      	ldr	r2, [pc, #40]	@ (80005b8 <createTask+0x7c>)
 800058e:	6013      	str	r3, [r2, #0]

	// Insert at end of tasks linked list
	userAllocatedTaskNode->taskTCB = userAllocatedTCB;
 8000590:	6a3b      	ldr	r3, [r7, #32]
 8000592:	683a      	ldr	r2, [r7, #0]
 8000594:	601a      	str	r2, [r3, #0]
	userAllocatedTaskNode->next = NULL;
 8000596:	6a3b      	ldr	r3, [r7, #32]
 8000598:	2200      	movs	r2, #0
 800059a:	605a      	str	r2, [r3, #4]

	STATUS resStatus;
	systemENTER_CRITICAL();
 800059c:	f7ff ff52 	bl	8000444 <systemENTER_CRITICAL>
	{
		resStatus = prvAddTaskNodeToReadyList(userAllocatedTaskNode);
 80005a0:	6a38      	ldr	r0, [r7, #32]
 80005a2:	f000 f93b 	bl	800081c <prvAddTaskNodeToReadyList>
 80005a6:	4603      	mov	r3, r0
 80005a8:	75fb      	strb	r3, [r7, #23]
	}
	systemEXIT_CRITICAL();
 80005aa:	f7ff ff58 	bl	800045e <systemEXIT_CRITICAL>

	return resStatus;
 80005ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3718      	adds	r7, #24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000464 	.word	0x20000464

080005bc <SysTick_Handler>:

void SysTick_Handler()
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
	msTicks++;
 80005c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000640 <SysTick_Handler+0x84>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	3301      	adds	r3, #1
 80005c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000640 <SysTick_Handler+0x84>)
 80005ca:	6013      	str	r3, [r2, #0]

	prvUnblockDelayedTasksReadyToUnblock();
 80005cc:	f000 f9a2 	bl	8000914 <prvUnblockDelayedTasksReadyToUnblock>

	if (curTask == NULL)
 80005d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000644 <SysTick_Handler+0x88>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d02f      	beq.n	8000638 <SysTick_Handler+0x7c>
	{
		return;
	}

	uint32_t curExecutingPriority = curTask->taskTCB->priority;
 80005d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000644 <SysTick_Handler+0x88>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	607b      	str	r3, [r7, #4]

	TaskNode *highestPriorityPossibleExecute = prvGetHighestTaskReadyToExecute();
 80005e2:	f000 f94f 	bl	8000884 <prvGetHighestTaskReadyToExecute>
 80005e6:	6038      	str	r0, [r7, #0]

	// Check if a higher priority task is ready to execute
	if (curExecutingPriority < highestPriorityPossibleExecute->taskTCB->priority)
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d205      	bcs.n	8000600 <SysTick_Handler+0x44>
	{
		prvNextTask = highestPriorityPossibleExecute;
 80005f4:	4a14      	ldr	r2, [pc, #80]	@ (8000648 <SysTick_Handler+0x8c>)
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	6013      	str	r3, [r2, #0]
		setPendSVPending();
 80005fa:	f000 f881 	bl	8000700 <setPendSVPending>
		return;
 80005fe:	e01c      	b.n	800063a <SysTick_Handler+0x7e>
	}

	if (curTask->next == NULL)
 8000600:	4b10      	ldr	r3, [pc, #64]	@ (8000644 <SysTick_Handler+0x88>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d10e      	bne.n	8000628 <SysTick_Handler+0x6c>
	{
		if (highestPriorityPossibleExecute->taskTCB->id != curTask->taskTCB->id)
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	689a      	ldr	r2, [r3, #8]
 8000610:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <SysTick_Handler+0x88>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	429a      	cmp	r2, r3
 800061a:	d00e      	beq.n	800063a <SysTick_Handler+0x7e>
		{
			// There is another task of equal priority, time to switch.
			prvNextTask = highestPriorityPossibleExecute;
 800061c:	4a0a      	ldr	r2, [pc, #40]	@ (8000648 <SysTick_Handler+0x8c>)
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	6013      	str	r3, [r2, #0]
			setPendSVPending();
 8000622:	f000 f86d 	bl	8000700 <setPendSVPending>
			return;
 8000626:	e008      	b.n	800063a <SysTick_Handler+0x7e>
		}
	}
	else
	{
		// There is another task of equal priority, time to switch.
		prvNextTask = curTask->next;
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <SysTick_Handler+0x88>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	4a06      	ldr	r2, [pc, #24]	@ (8000648 <SysTick_Handler+0x8c>)
 8000630:	6013      	str	r3, [r2, #0]
		setPendSVPending();
 8000632:	f000 f865 	bl	8000700 <setPendSVPending>
		return;
 8000636:	e000      	b.n	800063a <SysTick_Handler+0x7e>
		return;
 8000638:	bf00      	nop
	}
}
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000454 	.word	0x20000454
 8000644:	20000458 	.word	0x20000458
 8000648:	20000468 	.word	0x20000468

0800064c <PendSV_Handler>:

void PendSV_Handler()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
	uint32_t spToSave;

	__asm volatile(
 8000652:	f3ef 8009 	mrs	r0, PSP
 8000656:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800065a:	4603      	mov	r3, r0
 800065c:	607b      	str	r3, [r7, #4]
			"mrs r0, PSP\n"
			"stmdb r0!, {r4-r11}\n"
			"mov %[spToSave], r0\n"
			: [spToSave] "=r"(spToSave));

	curTask->taskTCB->sp = (uint32_t *)spToSave;
 800065e:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <PendSV_Handler+0x50>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	601a      	str	r2, [r3, #0]

	uint32_t nextSP;
	systemENTER_CRITICAL();
 8000668:	f7ff feec 	bl	8000444 <systemENTER_CRITICAL>
	{
		nextSP = (uint32_t) prvNextTask->taskTCB->sp;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <PendSV_Handler+0x54>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	603b      	str	r3, [r7, #0]
		curTask = prvNextTask;
 8000676:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <PendSV_Handler+0x54>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a08      	ldr	r2, [pc, #32]	@ (800069c <PendSV_Handler+0x50>)
 800067c:	6013      	str	r3, [r2, #0]
	}
	systemEXIT_CRITICAL();
 800067e:	f7ff feee 	bl	800045e <systemEXIT_CRITICAL>


	__asm volatile(
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	e8b2 0ff0 	ldmia.w	r2!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800068a:	f382 8809 	msr	PSP, r2
			"ldmia r2!, {r4-r11}\n"
			"msr PSP, r2\n"
			:
			: [nextSP] "r"(nextSP));

	__asm volatile(
 800068e:	f06f 0e02 	mvn.w	lr, #2
 8000692:	4770      	bx	lr
			"ldr lr, =0xFFFFFFFD\n"
			"bx lr\n");
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000458 	.word	0x20000458
 80006a0:	20000468 	.word	0x20000468

080006a4 <SVC_Handler>:

void SVC_Handler()
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
	TCB *tcbToStart = curTask->taskTCB;
 80006aa:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <SVC_Handler+0x30>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	607b      	str	r3, [r7, #4]
	uint32_t spToStart = (uint32_t) tcbToStart->sp;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	603b      	str	r3, [r7, #0]

	__asm volatile(
 80006b8:	6838      	ldr	r0, [r7, #0]
 80006ba:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80006be:	f380 8809 	msr	PSP, r0
 80006c2:	f06f 0e02 	mvn.w	lr, #2
 80006c6:	4770      	bx	lr
			"msr PSP, r0\n"
			"ldr lr, =0xFFFFFFFD\n"
			"bx lr\n"
			:
			: [sp] "m"(spToStart));
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	20000458 	.word	0x20000458

080006d8 <startScheduler>:

void startScheduler()
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	prvIdleTask = createIdleTask();
 80006dc:	f000 f964 	bl	80009a8 <createIdleTask>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a05      	ldr	r2, [pc, #20]	@ (80006f8 <startScheduler+0x20>)
 80006e4:	6013      	str	r3, [r2, #0]
	curTask = prvGetHighestTaskReadyToExecute();
 80006e6:	f000 f8cd 	bl	8000884 <prvGetHighestTaskReadyToExecute>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a03      	ldr	r2, [pc, #12]	@ (80006fc <startScheduler+0x24>)
 80006ee:	6013      	str	r3, [r2, #0]
	__asm volatile("svc #0");
 80006f0:	df00      	svc	0
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000688 	.word	0x20000688
 80006fc:	20000458 	.word	0x20000458

08000700 <setPendSVPending>:

void setPendSVPending()
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
	ICSR |= (1 << 28);
 8000704:	4b05      	ldr	r3, [pc, #20]	@ (800071c <setPendSVPending+0x1c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a04      	ldr	r2, [pc, #16]	@ (800071c <setPendSVPending+0x1c>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070e:	6013      	str	r3, [r2, #0]
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000ed04 	.word	0xe000ed04

08000720 <taskDelay>:

void taskDelay(uint32_t ticksToDelay)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	systemENTER_CRITICAL();
 8000728:	f7ff fe8c 	bl	8000444 <systemENTER_CRITICAL>
	{
		uint32_t curTaskID = curTask->taskTCB->id;
 800072c:	4b37      	ldr	r3, [pc, #220]	@ (800080c <taskDelay+0xec>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	617b      	str	r3, [r7, #20]
		uint32_t curTaskPriority = curTask->taskTCB->priority;
 8000736:	4b35      	ldr	r3, [pc, #212]	@ (800080c <taskDelay+0xec>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	613b      	str	r3, [r7, #16]

		curTask->taskTCB->delayedUntil = msTicks + ticksToDelay;
 8000740:	4b33      	ldr	r3, [pc, #204]	@ (8000810 <taskDelay+0xf0>)
 8000742:	6819      	ldr	r1, [r3, #0]
 8000744:	4b31      	ldr	r3, [pc, #196]	@ (800080c <taskDelay+0xec>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	440a      	add	r2, r1
 800074e:	60da      	str	r2, [r3, #12]

		// Remove the task from the ready list
		TaskNode *cur = readyTasksList[curTaskPriority];
 8000750:	4a30      	ldr	r2, [pc, #192]	@ (8000814 <taskDelay+0xf4>)
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000758:	61fb      	str	r3, [r7, #28]
		TaskNode *prev = NULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]

		if (cur->next == NULL)
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d113      	bne.n	800078e <taskDelay+0x6e>
		{
			// This is the only task for this priority, and it must be curTask
			readyTasksList[curTaskPriority] = NULL;
 8000766:	4a2b      	ldr	r2, [pc, #172]	@ (8000814 <taskDelay+0xf4>)
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	2100      	movs	r1, #0
 800076c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			prvNextTask = prvGetHighestTaskReadyToExecute();
 8000770:	f000 f888 	bl	8000884 <prvGetHighestTaskReadyToExecute>
 8000774:	4603      	mov	r3, r0
 8000776:	4a28      	ldr	r2, [pc, #160]	@ (8000818 <taskDelay+0xf8>)
 8000778:	6013      	str	r3, [r2, #0]
			prvAddTaskToBlockedList(curTask);
 800077a:	4b24      	ldr	r3, [pc, #144]	@ (800080c <taskDelay+0xec>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f8a4 	bl	80008cc <prvAddTaskToBlockedList>
			systemEXIT_CRITICAL();
 8000784:	f7ff fe6b 	bl	800045e <systemEXIT_CRITICAL>
			setPendSVPending();
 8000788:	f7ff ffba 	bl	8000700 <setPendSVPending>
			return;
 800078c:	e03a      	b.n	8000804 <taskDelay+0xe4>
		}

		// Check if curTask is the head of the priority
		if (cur->taskTCB->id == curTaskID)
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	697a      	ldr	r2, [r7, #20]
 8000796:	429a      	cmp	r2, r3
 8000798:	d11a      	bne.n	80007d0 <taskDelay+0xb0>
		{
			readyTasksList[curTaskPriority] = curTask->next;
 800079a:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <taskDelay+0xec>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	685a      	ldr	r2, [r3, #4]
 80007a0:	491c      	ldr	r1, [pc, #112]	@ (8000814 <taskDelay+0xf4>)
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			prvNextTask = prvGetHighestTaskReadyToExecute();
 80007a8:	f000 f86c 	bl	8000884 <prvGetHighestTaskReadyToExecute>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4a1a      	ldr	r2, [pc, #104]	@ (8000818 <taskDelay+0xf8>)
 80007b0:	6013      	str	r3, [r2, #0]
			prvAddTaskToBlockedList(curTask);
 80007b2:	4b16      	ldr	r3, [pc, #88]	@ (800080c <taskDelay+0xec>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f888 	bl	80008cc <prvAddTaskToBlockedList>
			systemEXIT_CRITICAL();
 80007bc:	f7ff fe4f 	bl	800045e <systemEXIT_CRITICAL>
			setPendSVPending();
 80007c0:	f7ff ff9e 	bl	8000700 <setPendSVPending>
			return;
 80007c4:	e01e      	b.n	8000804 <taskDelay+0xe4>
		}

		// There is more than one task for the current priority
		while (cur->taskTCB->id != curTaskID)
		{
			prev = cur;
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	61bb      	str	r3, [r7, #24]
			cur = cur->next;
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	61fb      	str	r3, [r7, #28]
		while (cur->taskTCB->id != curTaskID)
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d1f4      	bne.n	80007c6 <taskDelay+0xa6>
		}

		TaskNode *afterCur = cur->next;
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	60fb      	str	r3, [r7, #12]
		prev->next = afterCur;
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	605a      	str	r2, [r3, #4]

		prvNextTask = prvGetHighestTaskReadyToExecute();
 80007e8:	f000 f84c 	bl	8000884 <prvGetHighestTaskReadyToExecute>
 80007ec:	4603      	mov	r3, r0
 80007ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000818 <taskDelay+0xf8>)
 80007f0:	6013      	str	r3, [r2, #0]
		prvAddTaskToBlockedList(curTask);
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <taskDelay+0xec>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f868 	bl	80008cc <prvAddTaskToBlockedList>
	}
	systemEXIT_CRITICAL();
 80007fc:	f7ff fe2f 	bl	800045e <systemEXIT_CRITICAL>
	setPendSVPending();
 8000800:	f7ff ff7e 	bl	8000700 <setPendSVPending>
}
 8000804:	3720      	adds	r7, #32
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000458 	.word	0x20000458
 8000810:	20000454 	.word	0x20000454
 8000814:	2000045c 	.word	0x2000045c
 8000818:	20000468 	.word	0x20000468

0800081c <prvAddTaskNodeToReadyList>:

static STATUS prvAddTaskNodeToReadyList(TaskNode *task)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	// Safeguards
	if (task->taskTCB->priority >= MAX_PRIORITIES)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d901      	bls.n	8000832 <prvAddTaskNodeToReadyList+0x16>
	{
		return STATUS_FAILURE;
 800082e:	2301      	movs	r3, #1
 8000830:	e020      	b.n	8000874 <prvAddTaskNodeToReadyList+0x58>
	}

	task->next = NULL;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]

	uint32_t curPriority = task->taskTCB->priority;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	60bb      	str	r3, [r7, #8]

	TaskNode *curHead = readyTasksList[curPriority];
 8000840:	4a0f      	ldr	r2, [pc, #60]	@ (8000880 <prvAddTaskNodeToReadyList+0x64>)
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000848:	60fb      	str	r3, [r7, #12]

	if (curHead == NULL)
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d109      	bne.n	8000864 <prvAddTaskNodeToReadyList+0x48>
	{
		// This is the first node for this priority
		readyTasksList[curPriority] = task;
 8000850:	490b      	ldr	r1, [pc, #44]	@ (8000880 <prvAddTaskNodeToReadyList+0x64>)
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return STATUS_SUCCESS;
 800085a:	2300      	movs	r3, #0
 800085c:	e00a      	b.n	8000874 <prvAddTaskNodeToReadyList+0x58>
	}

	// Get to the end of the LL
	while (curHead->next != NULL)
	{
		curHead = curHead->next;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	60fb      	str	r3, [r7, #12]
	while (curHead->next != NULL)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1f8      	bne.n	800085e <prvAddTaskNodeToReadyList+0x42>
	}

	curHead->next = task;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	605a      	str	r2, [r3, #4]
	return STATUS_SUCCESS;
 8000872:	2300      	movs	r3, #0
}
 8000874:	4618      	mov	r0, r3
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	2000045c 	.word	0x2000045c

08000884 <prvGetHighestTaskReadyToExecute>:

static TaskNode *prvGetHighestTaskReadyToExecute()
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
	int idx = MAX_PRIORITIES - 1; // Highest Priority Possible
 800088a:	2301      	movs	r3, #1
 800088c:	607b      	str	r3, [r7, #4]

	while (idx >= 0)
 800088e:	e00d      	b.n	80008ac <prvGetHighestTaskReadyToExecute+0x28>
	{
		if (readyTasksList[idx] != NULL)
 8000890:	4a0c      	ldr	r2, [pc, #48]	@ (80008c4 <prvGetHighestTaskReadyToExecute+0x40>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d004      	beq.n	80008a6 <prvGetHighestTaskReadyToExecute+0x22>
		{
			return readyTasksList[idx];
 800089c:	4a09      	ldr	r2, [pc, #36]	@ (80008c4 <prvGetHighestTaskReadyToExecute+0x40>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a4:	e007      	b.n	80008b6 <prvGetHighestTaskReadyToExecute+0x32>
		}
		--idx;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3b01      	subs	r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
	while (idx >= 0)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	daee      	bge.n	8000890 <prvGetHighestTaskReadyToExecute+0xc>
	}

	// If no tasks are ready to run, return the idle task
	return prvIdleTask;
 80008b2:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <prvGetHighestTaskReadyToExecute+0x44>)
 80008b4:	681b      	ldr	r3, [r3, #0]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	2000045c 	.word	0x2000045c
 80008c8:	20000688 	.word	0x20000688

080008cc <prvAddTaskToBlockedList>:

// Maybe make this return a STATUS?
static void prvAddTaskToBlockedList(TaskNode *task)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	task->next = NULL;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]

	if (prvBlockedTasks == NULL)
 80008da:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <prvAddTaskToBlockedList+0x44>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d103      	bne.n	80008ea <prvAddTaskToBlockedList+0x1e>
	{
		prvBlockedTasks = task;
 80008e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000910 <prvAddTaskToBlockedList+0x44>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6013      	str	r3, [r2, #0]
		return;
 80008e8:	e00d      	b.n	8000906 <prvAddTaskToBlockedList+0x3a>
	}

	TaskNode *cur = prvBlockedTasks;
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <prvAddTaskToBlockedList+0x44>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	60fb      	str	r3, [r7, #12]

	while (cur->next != NULL)
 80008f0:	e002      	b.n	80008f8 <prvAddTaskToBlockedList+0x2c>
	{
		cur = cur->next;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	60fb      	str	r3, [r7, #12]
	while (cur->next != NULL)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1f8      	bne.n	80008f2 <prvAddTaskToBlockedList+0x26>
	}

	cur->next = task;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	605a      	str	r2, [r3, #4]
}
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	2000046c 	.word	0x2000046c

08000914 <prvUnblockDelayedTasksReadyToUnblock>:

static void prvUnblockDelayedTasksReadyToUnblock()
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
	TaskNode *cur = prvBlockedTasks;
 800091a:	4b21      	ldr	r3, [pc, #132]	@ (80009a0 <prvUnblockDelayedTasksReadyToUnblock+0x8c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	60fb      	str	r3, [r7, #12]
	TaskNode *prev = NULL;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]

	if (cur == NULL)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d036      	beq.n	8000998 <prvUnblockDelayedTasksReadyToUnblock+0x84>
	{
		// Nothing blocked, nothing to do
		return;
	}

	if (cur->next == NULL)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d12e      	bne.n	8000990 <prvUnblockDelayedTasksReadyToUnblock+0x7c>
	{
		// This is the only node
		if (cur->taskTCB->delayedUntil == msTicks)
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	68da      	ldr	r2, [r3, #12]
 8000938:	4b1a      	ldr	r3, [pc, #104]	@ (80009a4 <prvUnblockDelayedTasksReadyToUnblock+0x90>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	429a      	cmp	r2, r3
 800093e:	d127      	bne.n	8000990 <prvUnblockDelayedTasksReadyToUnblock+0x7c>
		{
			// Remove the task
			prvBlockedTasks = NULL;
 8000940:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <prvUnblockDelayedTasksReadyToUnblock+0x8c>)
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
			prvAddTaskNodeToReadyList(cur);
 8000946:	68f8      	ldr	r0, [r7, #12]
 8000948:	f7ff ff68 	bl	800081c <prvAddTaskNodeToReadyList>
			return;
 800094c:	e025      	b.n	800099a <prvUnblockDelayedTasksReadyToUnblock+0x86>
		}
	}

	while (cur != NULL)
	{
		TaskNode *tempNext = cur->next;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	607b      	str	r3, [r7, #4]
		if (cur->taskTCB->delayedUntil == msTicks)
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	68da      	ldr	r2, [r3, #12]
 800095a:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <prvUnblockDelayedTasksReadyToUnblock+0x90>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	429a      	cmp	r2, r3
 8000960:	d112      	bne.n	8000988 <prvUnblockDelayedTasksReadyToUnblock+0x74>
		{
			// Add it to the ready list and remove from the blocked list
			if (prev == NULL)
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d107      	bne.n	8000978 <prvUnblockDelayedTasksReadyToUnblock+0x64>
			{
				prvBlockedTasks = cur->next;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	4a0c      	ldr	r2, [pc, #48]	@ (80009a0 <prvUnblockDelayedTasksReadyToUnblock+0x8c>)
 800096e:	6013      	str	r3, [r2, #0]
				prvAddTaskNodeToReadyList(cur);
 8000970:	68f8      	ldr	r0, [r7, #12]
 8000972:	f7ff ff53 	bl	800081c <prvAddTaskNodeToReadyList>
 8000976:	e009      	b.n	800098c <prvUnblockDelayedTasksReadyToUnblock+0x78>
			}
			else
			{
				prev->next = cur->next;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	685a      	ldr	r2, [r3, #4]
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	605a      	str	r2, [r3, #4]
				prvAddTaskNodeToReadyList(cur);
 8000980:	68f8      	ldr	r0, [r7, #12]
 8000982:	f7ff ff4b 	bl	800081c <prvAddTaskNodeToReadyList>
 8000986:	e001      	b.n	800098c <prvUnblockDelayedTasksReadyToUnblock+0x78>
			}
		}
		else
		{
			prev = cur;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	60bb      	str	r3, [r7, #8]
		}
		cur = tempNext;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	60fb      	str	r3, [r7, #12]
	while (cur != NULL)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d1db      	bne.n	800094e <prvUnblockDelayedTasksReadyToUnblock+0x3a>
 8000996:	e000      	b.n	800099a <prvUnblockDelayedTasksReadyToUnblock+0x86>
		return;
 8000998:	bf00      	nop
	}
}
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000046c 	.word	0x2000046c
 80009a4:	20000454 	.word	0x20000454

080009a8 <createIdleTask>:

static TaskNode *createIdleTask()
{
 80009a8:	b598      	push	{r3, r4, r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	idleTaskTCBptr->sp = initTaskStackFrame(idleTaskStack, &idleTask);
 80009ac:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <createIdleTask+0x4c>)
 80009ae:	681c      	ldr	r4, [r3, #0]
 80009b0:	4911      	ldr	r1, [pc, #68]	@ (80009f8 <createIdleTask+0x50>)
 80009b2:	4812      	ldr	r0, [pc, #72]	@ (80009fc <createIdleTask+0x54>)
 80009b4:	f7ff fd60 	bl	8000478 <initTaskStackFrame>
 80009b8:	4603      	mov	r3, r0
 80009ba:	6023      	str	r3, [r4, #0]
	idleTaskTCBptr->priority = 0;
 80009bc:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <createIdleTask+0x4c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2200      	movs	r2, #0
 80009c2:	605a      	str	r2, [r3, #4]
	idleTaskTCBptr->id = prvCurTaskIDNum;
 80009c4:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <createIdleTask+0x4c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a00 <createIdleTask+0x58>)
 80009ca:	6812      	ldr	r2, [r2, #0]
 80009cc:	609a      	str	r2, [r3, #8]
	idleTaskNodePtr->taskTCB = idleTaskTCBptr;
 80009ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <createIdleTask+0x5c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a08      	ldr	r2, [pc, #32]	@ (80009f4 <createIdleTask+0x4c>)
 80009d4:	6812      	ldr	r2, [r2, #0]
 80009d6:	601a      	str	r2, [r3, #0]
	idleTaskNodePtr->next = NULL;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <createIdleTask+0x5c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
	prvCurTaskIDNum++;
 80009e0:	4b07      	ldr	r3, [pc, #28]	@ (8000a00 <createIdleTask+0x58>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	3301      	adds	r3, #1
 80009e6:	4a06      	ldr	r2, [pc, #24]	@ (8000a00 <createIdleTask+0x58>)
 80009e8:	6013      	str	r3, [r2, #0]

	return idleTaskNodePtr;
 80009ea:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <createIdleTask+0x5c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd98      	pop	{r3, r4, r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000000 	.word	0x20000000
 80009f8:	08000a09 	.word	0x08000a09
 80009fc:	20000470 	.word	0x20000470
 8000a00:	20000464 	.word	0x20000464
 8000a04:	20000004 	.word	0x20000004

08000a08 <idleTask>:

static void idleTask()
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
	for (;;)
	{
		__asm volatile("wfi");
 8000a0c:	bf30      	wfi
 8000a0e:	e7fd      	b.n	8000a0c <idleTask+0x4>

08000a10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a10:	480d      	ldr	r0, [pc, #52]	@ (8000a48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a12:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a14:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a18:	480c      	ldr	r0, [pc, #48]	@ (8000a4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1a:	490d      	ldr	r1, [pc, #52]	@ (8000a50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <LoopForever+0xe>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a20:	e002      	b.n	8000a28 <LoopCopyDataInit>

08000a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a26:	3304      	adds	r3, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a2c:	d3f9      	bcc.n	8000a22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a30:	4c0a      	ldr	r4, [pc, #40]	@ (8000a5c <LoopForever+0x16>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a34:	e001      	b.n	8000a3a <LoopFillZerobss>

08000a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a38:	3204      	adds	r2, #4

08000a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a3e:	f000 f811 	bl	8000a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a42:	f7ff fcd5 	bl	80003f0 <main>

08000a46 <LoopForever>:

LoopForever:
  b LoopForever
 8000a46:	e7fe      	b.n	8000a46 <LoopForever>
  ldr   r0, =_estack
 8000a48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000a54:	08000acc 	.word	0x08000acc
  ldr r2, =_sbss
 8000a58:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000a5c:	2000068c 	.word	0x2000068c

08000a60 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC_IRQHandler>
	...

08000a64 <__libc_init_array>:
 8000a64:	b570      	push	{r4, r5, r6, lr}
 8000a66:	4d0d      	ldr	r5, [pc, #52]	@ (8000a9c <__libc_init_array+0x38>)
 8000a68:	4c0d      	ldr	r4, [pc, #52]	@ (8000aa0 <__libc_init_array+0x3c>)
 8000a6a:	1b64      	subs	r4, r4, r5
 8000a6c:	10a4      	asrs	r4, r4, #2
 8000a6e:	2600      	movs	r6, #0
 8000a70:	42a6      	cmp	r6, r4
 8000a72:	d109      	bne.n	8000a88 <__libc_init_array+0x24>
 8000a74:	4d0b      	ldr	r5, [pc, #44]	@ (8000aa4 <__libc_init_array+0x40>)
 8000a76:	4c0c      	ldr	r4, [pc, #48]	@ (8000aa8 <__libc_init_array+0x44>)
 8000a78:	f000 f818 	bl	8000aac <_init>
 8000a7c:	1b64      	subs	r4, r4, r5
 8000a7e:	10a4      	asrs	r4, r4, #2
 8000a80:	2600      	movs	r6, #0
 8000a82:	42a6      	cmp	r6, r4
 8000a84:	d105      	bne.n	8000a92 <__libc_init_array+0x2e>
 8000a86:	bd70      	pop	{r4, r5, r6, pc}
 8000a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a8c:	4798      	blx	r3
 8000a8e:	3601      	adds	r6, #1
 8000a90:	e7ee      	b.n	8000a70 <__libc_init_array+0xc>
 8000a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a96:	4798      	blx	r3
 8000a98:	3601      	adds	r6, #1
 8000a9a:	e7f2      	b.n	8000a82 <__libc_init_array+0x1e>
 8000a9c:	08000ac4 	.word	0x08000ac4
 8000aa0:	08000ac4 	.word	0x08000ac4
 8000aa4:	08000ac4 	.word	0x08000ac4
 8000aa8:	08000ac8 	.word	0x08000ac8

08000aac <_init>:
 8000aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aae:	bf00      	nop
 8000ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ab2:	bc08      	pop	{r3}
 8000ab4:	469e      	mov	lr, r3
 8000ab6:	4770      	bx	lr

08000ab8 <_fini>:
 8000ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aba:	bf00      	nop
 8000abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000abe:	bc08      	pop	{r3}
 8000ac0:	469e      	mov	lr, r3
 8000ac2:	4770      	bx	lr
